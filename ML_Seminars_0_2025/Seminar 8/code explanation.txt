First code:
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

population_size = 100000
population = np.random.exponential(scale=2.0, size=population_size)

plt.figure(figsize=(8, 5))
sns.histplot(population, bins=50, kde=True, color='blue')
plt.title('Original Population Distribution (Exponential)')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

sample_sizes = [5, 10, 30, 50,100]
sample_means = {}
num_samples = 1000

for size in sample_sizes:
    means = [np.mean(np.random.choice(population, size=size, replace=True)) for _ in range(num_samples)]
    sample_means[size] = means

plt.figure(figsize=(12, 8))
for size, means in sample_means.items():
    sns.kdeplot(means, label=f'Sample Size {size}')

plt.title('Distribution of Sample Means - Central Limit Theorem')
plt.xlabel('Sample Mean')
plt.ylabel('Frequency')
plt.legend()
plt.show()

Certainly! Here is a **step-by-step explanation** of the code you posted. This code is a demonstration of the Central Limit Theorem (CLT) using Python libraries `numpy`, `seaborn`, and `matplotlib`.

---

### 1. **Import Libraries**
```python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
```
- **numpy (np)**: For generating random numbers and numerical calculations.
- **seaborn (sns)**: For advanced data visualization (built on top of matplotlib).
- **matplotlib.pyplot (plt)**: For plotting graphs.

---

### 2. **Generate the Original Population**
```python
population_size = 100000
population = np.random.exponential(scale=2.0, size=population_size)
```
- **population_size = 100000**: Set the number of data points in the "population".
- **np.random.exponential(scale=2.0, size=population_size)**: Generates 100,000 random numbers drawn from an exponential distribution with mean (scale) 2.0.
    - The exponential distribution is **skewed**, not normal, so it's good for demonstrating the CLT.

---

### 3. **Visualize the Original Population**
```python
plt.figure(figsize=(8, 5))
sns.histplot(population, bins=50, kde=True, color='blue')
plt.title('Original Population Distribution (Exponential)')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()
```
- **plt.figure(figsize=(8, 5))**: Set the size of the figure.
- **sns.histplot(...)**: Plot a histogram (`histplot`) of the population data:
    - `bins=50`: Use 50 bins (bars).
    - `kde=True`: Overlay a smooth curve (kernel density estimate).
    - `color='blue'`: Bars and curve will be blue.
- **plt.title, plt.xlabel, plt.ylabel**: Label the plot.
- **plt.show()**: Display the plot.
- **Result**: You see the highly skewed shape of the exponential distribution.

---

### 4. **Set Up for the Central Limit Theorem Experiment**
```python
sample_sizes = [5, 10, 30, 50, 100]
sample_means = {}
num_samples = 1000
```
- **sample_sizes**: List of different sample sizes to test.
- **sample_means**: Dictionary to store the sample means for each sample size.
- **num_samples = 1000**: For each sample size, take 1000 random samples.

---

### 5. **Draw Samples and Calculate Sample Means**
```python
for size in sample_sizes:
    means = [np.mean(np.random.choice(population, size=size, replace=True)) for _ in range(num_samples)]
    sample_means[size] = means
```
- **For each sample size** (e.g., 5, 10, 30, etc.):
    - **np.random.choice(population, size=size, replace=True)**:
        - Randomly choose `size` elements from the population (with replacement).
    - **np.mean(...)**: Compute the mean of this sample.
    - **[ ... for _ in range(num_samples)]**: Repeat this process 1000 times to get 1000 sample means.
    - **sample_means[size] = means**: Store the 1000 sample means for this sample size in a dictionary.

---

### 6. **Plot the Distribution of Sample Means**
```python
plt.figure(figsize=(12, 8))
for size, means in sample_means.items():
    sns.kdeplot(means, label=f'Sample Size {size}')

plt.title('Distribution of Sample Means - Central Limit Theorem')
plt.xlabel('Sample Mean')
plt.ylabel('Frequency')
plt.legend()
plt.show()
```
- **plt.figure(figsize=(12, 8))**: Make a large figure for clarity.
- **for size, means in sample_means.items():**
    - For each sample size, plot the kernel density estimate (smooth curve) of the 1000 sample means using `sns.kdeplot`.
    - **label**: Add a legend label for each sample size.
- **plt.title, plt.xlabel, plt.ylabel, plt.legend**: Label the plot and add a legend.
- **plt.show()**: Display the plot.

---

### 7. **What Does This Show?**
- As **sample size increases** (from 5 to 100), the distribution of sample means **becomes more bell-shaped and normal-looking**, even though the original population is highly skewed.
- This is the **Central Limit Theorem** in action: Regardless of the population's original distribution, the distribution of sample means approaches normality as sample size increases.

---

**Summary:**  
This code visually demonstrates the Central Limit Theorem by:
- Generating a non-normal population,
- Drawing many random samples of different sizes,
- Plotting the distributions of the sample means,
- Showing that they become more normal for larger sample sizes.


Second code:

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

population_size = 100000
population = np.random.uniform(low=0, high=10, size=population_size)
true_mean = np.mean(population)

sample_sizes = np.arange(1, 5000, 10)
sample_means = []

for size in sample_sizes:
    sample = np.random.choice(population, size=size, replace=True)
    sample_means.append(np.mean(sample))

plt.figure(figsize=(10, 6))
sns.lineplot(x=sample_sizes, y=sample_means, label='Sample Mean')
plt.axhline(y=true_mean,color = 'yellow', linestyle='--', label='True Mean')
plt.title('Law of Large Numbers - Convergence of Sample Mean')
plt.xlabel('Sample Size')
plt.ylabel('Mean Value')
plt.legend()
plt.show()

Here is a **step-by-step explanation** of your code. This code demonstrates the **Law of Large Numbers (LLN)** using a uniform distribution.

---

### 1. **Import Libraries**
```python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
```
- **numpy (np):** For generating random numbers and calculations.
- **seaborn (sns):** For creating attractive visualizations.
- **matplotlib.pyplot (plt):** For plotting graphs.

---

### 2. **Generate the Population**
```python
population_size = 100000
population = np.random.uniform(low=0, high=10, size=population_size)
true_mean = np.mean(population)
```
- **population_size = 100000:** The size of your simulated "population".
- **np.random.uniform(low=0, high=10, size=population_size):** Generates 100,000 random numbers uniformly distributed between 0 and 10.
- **true_mean = np.mean(population):** Calculates the actual mean of the population (should be close to 5).

---

### 3. **Set Up Sample Sizes and Storage**
```python
sample_sizes = np.arange(1, 5000, 10)
sample_means = []
```
- **sample_sizes:** An array of sample sizes, starting from 1 up to 5000 (exclusive), stepping by 10. So, you'll test sample sizes 1, 11, 21, ..., 4991.
- **sample_means:** An empty list to store the mean of each sample.

---

### 4. **Draw Samples and Calculate Sample Means**
```python
for size in sample_sizes:
    sample = np.random.choice(population, size=size, replace=True)
    sample_means.append(np.mean(sample))
```
- **For each sample size** in `sample_sizes`:
  - **np.random.choice(population, size=size, replace=True):** Randomly pick `size` elements from the population (with replacement).
  - **np.mean(sample):** Calculate the mean of the current sample.
  - **sample_means.append(...):** Store the sample mean in the `sample_means` list.

---

### 5. **Plot the Convergence of Sample Mean**
```python
plt.figure(figsize=(10, 6))
sns.lineplot(x=sample_sizes, y=sample_means, label='Sample Mean')
plt.axhline(y=true_mean,color = 'yellow', linestyle='--', label='True Mean')
plt.title('Law of Large Numbers - Convergence of Sample Mean')
plt.xlabel('Sample Size')
plt.ylabel('Mean Value')
plt.legend()
plt.show()
```
- **plt.figure(figsize=(10, 6)):** Sets the size of the figure.
- **sns.lineplot(x=sample_sizes, y=sample_means, label='Sample Mean'):** Plots the computed sample means against their sample sizes as a line plot.
- **plt.axhline(...)**: Draws a horizontal dashed line at the value of the true mean (from the entire population) for reference.
- **plt.title, plt.xlabel, plt.ylabel, plt.legend:** Add labels and a legend to the plot.
- **plt.show():** Display the plot.

---

### 6. **What Does This Show?**
- As **sample size increases**, the sample mean (blue line) gets closer and closer to the true mean (yellow dashed line).
- This visualizes the **Law of Large Numbers:** the sample mean converges to the population mean as the sample size increases.

---

**Summary:**  
This code simulates the Law of Large Numbers by repeatedly taking larger and larger samples from a uniform population and showing that the mean of these samples converges to the true mean of the population. 